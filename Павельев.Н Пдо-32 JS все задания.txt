	Павельев Никита Пдо-32

Задание 1: 
Нужно написать функцию, которая возвращает тип входного аргумента
На входе: один аргумент, любого значения
На выходе: строка, с типом входного аргумента
 
Решение: 
function getType(inp) {
  return typeof inp;
}

console.log(getType(8));  

Задание 2: 
Что выведется в консоль и почему?
const a = () => console.log("a");
const b = () => console.log("b");
const c = a || b ? a() : b();
console.log(c);

Решение: 
Вывод: "a" и "undefined".
Объяснение: оператор "а || b" проверяет истинность значения "а". Если "а" истинно, то результатом будет "а". Если "а" ложно, результатом будет "b". В данном случае, функция "a()" не возвращает явное значение, поэтому результатом будет "undefined", присваиваемый переменной "с".

Задание3: 
Нужно реализовать функцию, возвращающая сумму всех аргументов,
если тип аргумента - число. Вызовов ВСЕГДА 5
Примеры:
count(3)(2)(1)(5)(7) // 18
count(3)(null)(1)('asad')() // 4

Решение: 
function count(num) {
  let sum = typeof num === 'number' ? num : 0;

  function nextCount(nextNum) {
    if (typeof nextNum === 'number') {
      sum += nextNum;
    }
    return nextCount;
  }

  nextCount.toString = function() {
    return sum;
  };

  return nextCount;
}

console.log(count(3)(2)(1)(5)(7).toString());
console.log(count(3)(null)(1)('asad')().toString());

Задание 4: 
Реализовать функцию convertArrToObj, которая на вход принимает
массив значений, а на выход отдает объект, где ключ - это индекс элемента в
массиве, а значение - сам элемент
const arr = [1, null, 'test', undefined]
const obj = convertArrToObj()
console.log(obj) // { 0: 1, 1: null, 2: 'test', 3: undefined }

Решение: 
function convertArrToObj(arr) {
  return arr.reduce((obj, item, index) => {
    obj[index] = item;
    return obj;
  }, {});
}

const arr = [1, null, 'test', undefined];
const obj = convertArrToObj(arr);
console.log(obj);


Задание 5: 
Требуется реализовать функцию countFromArr, которая позволяет
подсчитать значения массива. На вход поступает массив, на выход получаем
объект, где ключ - это элемент массива, а значение - его кол-во в массиве
const arr = [1, 1, 1, 'test', 'test']
const res = countFromArr(arr)
console.log(res) // { 1: 3, test: 2 }

Решение: 
function countFromArr(arr) {
  return arr.reduce((countObj, element) => {
    countObj[element] = (countObj[element] || 0) + 1;
    return countObj;
  }, {});
}


Задание 6: 
Требуется реализовать функцию groupByField, которая позволяет
сгруппировать массив объектов по определенному полю этого объекта. 
На вход поступает массив объектов и строка с названием нужного поля, на выход
объект - где ключом является значение поля объекта, а значением - массив
объектов где значение в поле равно этому ключу 
Пример:
const arr = [{test: 1},{test: 2},{test: 3},{test: 1},{test: 1}]
const res = groupByField(arr, 'test')
console.log(res) // { 1: [{test: 1}, {test: 1}, {test: 1}], 2: [{test: 2}], 3: [{test: 3}]}


Решение: 
function groupByField(arr, field) {
  return arr.reduce((groupedObj, obj) => {
    const value = obj[field];
    groupedObj[value] = groupedObj[value] || [];
    groupedObj[value].push(obj);
    return groupedObj;
  }, {});
}

const arr = [{ test: 1 }, { test: 2 }, { test: 3 }, { test: 1 }, { test: 1 }];
const res = groupByField(arr, 'test');
console.log(res);


Задание 7: 
Реализовать функцию plus()
(1).plus(2); // 3

Решение: 
Number.prototype.plus = function(value) {
  return this + value;
};

console.log((1).plus(2)); // 3


Задание 8: 
Что выведется в консоль?
console.log("start");
setTimeout(() => console.log("timeout"), 0);
new Promise((resolve, reject) => {
console.log("promise constructor");
reject();
})
.then(() => console.log("p1"))
.catch(() => console.log("p2"))
.catch(() => console.log("p3"))
.then(() => console.log("p4"))
.then(() => console.log("p5"));
console.log("final");

Решение: 
1.start
2.promise constructor
3.final
4.p2
5.p4
6.p5
